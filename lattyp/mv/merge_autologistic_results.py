# -*- coding: utf-8 -*-
#
# merge samples generated by autologistic models
#
import sys, os
from collections import OrderedDict
from argparse import ArgumentParser
import json

from json_utils import load_json_file, load_json_stream

def main():
    parser = ArgumentParser()
    parser.add_argument("--cvout", metavar="FILE", default=None)
    parser.add_argument("--detail", metavar="FILE", default=None)
    parser.add_argument('aggregated', nargs="+")
    args = parser.parse_args()

    # TODO: update langs.filled.json
    
    cv_results = {}
    for agfile in args.aggregated:
        results = load_json_file(agfile)
        fid = results["fid"]
        if "cv_result" in results:
            if fid not in cv_results:
                cv_results[fid] = { "cor": 0, "total": 0, "cvn": 0 }
            cv_results[fid]["cvn"] += 1
            cv_results[fid]["cor"] += results["cv_result"]["cor"]
            cv_results[fid]["total"] += results["cv_result"]["total"]

    cor, total = 0, 0
    for k, result in cv_results.items():
        cor += result["cor"]
        total += result["total"]

    if args.cvout is not None:
        with open(args.cvout, "w") as f:
            f.write("{:.6f}\t{}\t{}\n".format(cor / total, cor, total))

    if args.detail is not None:
        cv_summary = OrderedDict()
        cv_summary["microaverage"] = cor / total
        avgs = {}
        for k, result in cv_results.items():
            avgs[k] = result["cor"] / result["total"]
        cv_summary["macroaverage"] = sum(avgs.values()) / len(avgs)
        cv_summary["per_feature"] = OrderedDict()
        for k in sorted(cv_results.keys()):
            cv_summary["per_feature"][k] = OrderedDict()
            cv_summary["per_feature"][k]["accuracy"] = cv_results[k]["cor"] / cv_results[k]["total"]
            cv_summary["per_feature"][k]["cor"] = cv_results[k]["cor"]
            cv_summary["per_feature"][k]["total"] = cv_results[k]["total"]
        with open(args.detail, "w") as f:
            f.write("%s\n" % json.dumps(cv_summary, indent=4))

if __name__ == "__main__":
    main()
